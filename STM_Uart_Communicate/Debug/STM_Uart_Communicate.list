
STM_Uart_Communicate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f44  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080020d8  080020d8  000030d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800212c  0800212c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  0800212c  0800212c  0000312c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002134  08002134  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002134  08002134  00003134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002138  08002138  00003138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800213c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08002148  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002148  000040dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076cb  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000153b  00000000  00000000  0000b707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000660  00000000  00000000  0000cc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004d3  00000000  00000000  0000d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001531d  00000000  00000000  0000d77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f9c  00000000  00000000  00022a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084242  00000000  00000000  0002aa34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aec76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018a4  00000000  00000000  000aecbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000b0560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080020c0 	.word	0x080020c0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080020c0 	.word	0x080020c0

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	2300      	movs	r3, #0
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	4b10      	ldr	r3, [pc, #64]	@ (8000534 <MX_GPIO_Init+0x5c>)
 80004f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000534 <MX_GPIO_Init+0x5c>)
 80004f6:	f043 0301 	orr.w	r3, r3, #1
 80004fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80004fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <MX_GPIO_Init+0x5c>)
 80004fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	603b      	str	r3, [r7, #0]
 8000506:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2120      	movs	r1, #32
 800050c:	480a      	ldr	r0, [pc, #40]	@ (8000538 <MX_GPIO_Init+0x60>)
 800050e:	f000 fccf 	bl	8000eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000512:	2320      	movs	r3, #32
 8000514:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000516:	2301      	movs	r3, #1
 8000518:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	4619      	mov	r1, r3
 8000526:	4804      	ldr	r0, [pc, #16]	@ (8000538 <MX_GPIO_Init+0x60>)
 8000528:	f000 fb3e 	bl	8000ba8 <HAL_GPIO_Init>

}
 800052c:	bf00      	nop
 800052e:	3718      	adds	r7, #24
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40023800 	.word	0x40023800
 8000538:	40020000 	.word	0x40020000

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 f9da 	bl	80008f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f862 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f7ff ffc6 	bl	80004d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800054c:	f000 f938 	bl	80007c0 <MX_USART2_UART_Init>
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[rx_index++], 1); // Start receiving
 8000550:	4b24      	ldr	r3, [pc, #144]	@ (80005e4 <main+0xa8>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	1c5a      	adds	r2, r3, #1
 8000556:	b2d1      	uxtb	r1, r2
 8000558:	4a22      	ldr	r2, [pc, #136]	@ (80005e4 <main+0xa8>)
 800055a:	7011      	strb	r1, [r2, #0]
 800055c:	461a      	mov	r2, r3
 800055e:	4b22      	ldr	r3, [pc, #136]	@ (80005e8 <main+0xac>)
 8000560:	4413      	add	r3, r2
 8000562:	2201      	movs	r2, #1
 8000564:	4619      	mov	r1, r3
 8000566:	4821      	ldr	r0, [pc, #132]	@ (80005ec <main+0xb0>)
 8000568:	f001 f9ef 	bl	800194a <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Check if a command has been received
	    if (command_received) {
 800056c:	4b20      	ldr	r3, [pc, #128]	@ (80005f0 <main+0xb4>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d0fb      	beq.n	800056c <main+0x30>
	      command_received = 0; // Reset flag
 8000574:	4b1e      	ldr	r3, [pc, #120]	@ (80005f0 <main+0xb4>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]

	      // Process the command
	           if (strcmp(rx_buffer, "LED_ON") == 0) {
 800057a:	491e      	ldr	r1, [pc, #120]	@ (80005f4 <main+0xb8>)
 800057c:	481a      	ldr	r0, [pc, #104]	@ (80005e8 <main+0xac>)
 800057e:	f7ff fe29 	bl	80001d4 <strcmp>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d10b      	bne.n	80005a0 <main+0x64>
	             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Turn on LED
 8000588:	2201      	movs	r2, #1
 800058a:	2120      	movs	r1, #32
 800058c:	481a      	ldr	r0, [pc, #104]	@ (80005f8 <main+0xbc>)
 800058e:	f000 fc8f 	bl	8000eb0 <HAL_GPIO_WritePin>
	             HAL_UART_Transmit(&huart2, (uint8_t*)"LED ON\r\n", 8, 100); // Send response
 8000592:	2364      	movs	r3, #100	@ 0x64
 8000594:	2208      	movs	r2, #8
 8000596:	4919      	ldr	r1, [pc, #100]	@ (80005fc <main+0xc0>)
 8000598:	4814      	ldr	r0, [pc, #80]	@ (80005ec <main+0xb0>)
 800059a:	f001 f94b 	bl	8001834 <HAL_UART_Transmit>
 800059e:	e018      	b.n	80005d2 <main+0x96>
	           } else if (strcmp(rx_buffer, "LED_OFF") == 0) {
 80005a0:	4917      	ldr	r1, [pc, #92]	@ (8000600 <main+0xc4>)
 80005a2:	4811      	ldr	r0, [pc, #68]	@ (80005e8 <main+0xac>)
 80005a4:	f7ff fe16 	bl	80001d4 <strcmp>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d10b      	bne.n	80005c6 <main+0x8a>
	             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Turn off LED
 80005ae:	2200      	movs	r2, #0
 80005b0:	2120      	movs	r1, #32
 80005b2:	4811      	ldr	r0, [pc, #68]	@ (80005f8 <main+0xbc>)
 80005b4:	f000 fc7c 	bl	8000eb0 <HAL_GPIO_WritePin>
	             HAL_UART_Transmit(&huart2, (uint8_t*)"LED OFF\r\n", 9, 100); // Send response
 80005b8:	2364      	movs	r3, #100	@ 0x64
 80005ba:	2209      	movs	r2, #9
 80005bc:	4911      	ldr	r1, [pc, #68]	@ (8000604 <main+0xc8>)
 80005be:	480b      	ldr	r0, [pc, #44]	@ (80005ec <main+0xb0>)
 80005c0:	f001 f938 	bl	8001834 <HAL_UART_Transmit>
 80005c4:	e005      	b.n	80005d2 <main+0x96>
	           } else {
	             HAL_UART_Transmit(&huart2, (uint8_t*)"Unknown Command\r\n", 17, 100); // Send error
 80005c6:	2364      	movs	r3, #100	@ 0x64
 80005c8:	2211      	movs	r2, #17
 80005ca:	490f      	ldr	r1, [pc, #60]	@ (8000608 <main+0xcc>)
 80005cc:	4807      	ldr	r0, [pc, #28]	@ (80005ec <main+0xb0>)
 80005ce:	f001 f931 	bl	8001834 <HAL_UART_Transmit>
	           }

	           // Clear the buffer
	           memset(rx_buffer, 0, sizeof(rx_buffer));
 80005d2:	2264      	movs	r2, #100	@ 0x64
 80005d4:	2100      	movs	r1, #0
 80005d6:	4804      	ldr	r0, [pc, #16]	@ (80005e8 <main+0xac>)
 80005d8:	f001 fd46 	bl	8002068 <memset>
	           rx_index = 0;
 80005dc:	4b01      	ldr	r3, [pc, #4]	@ (80005e4 <main+0xa8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	    if (command_received) {
 80005e2:	e7c3      	b.n	800056c <main+0x30>
 80005e4:	2000008c 	.word	0x2000008c
 80005e8:	20000028 	.word	0x20000028
 80005ec:	20000090 	.word	0x20000090
 80005f0:	2000008d 	.word	0x2000008d
 80005f4:	080020d8 	.word	0x080020d8
 80005f8:	40020000 	.word	0x40020000
 80005fc:	080020e0 	.word	0x080020e0
 8000600:	080020ec 	.word	0x080020ec
 8000604:	080020f4 	.word	0x080020f4
 8000608:	08002100 	.word	0x08002100

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	@ 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	@ 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f001 fd24 	bl	8002068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	@ (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000658:	4a20      	ldr	r2, [pc, #128]	@ (80006dc <SystemClock_Config+0xd0>)
 800065a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2310      	movs	r3, #16
 8000676:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000680:	2308      	movs	r3, #8
 8000682:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000684:	2354      	movs	r3, #84	@ 0x54
 8000686:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fc25 	bl	8000ee4 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a0:	f000 f81e 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2102      	movs	r1, #2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fe87 	bl	80013d4 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006cc:	f000 f808 	bl	80006e0 <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	@ 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <Error_Handler+0x8>

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <HAL_MspInit+0x4c>)
 80006f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000738 <HAL_MspInit+0x4c>)
 80006fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000700:	6453      	str	r3, [r2, #68]	@ 0x44
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <HAL_MspInit+0x4c>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <HAL_MspInit+0x4c>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000716:	4a08      	ldr	r2, [pc, #32]	@ (8000738 <HAL_MspInit+0x4c>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071c:	6413      	str	r3, [r2, #64]	@ 0x40
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <HAL_MspInit+0x4c>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <NMI_Handler+0x4>

08000744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <HardFault_Handler+0x4>

0800074c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <MemManage_Handler+0x4>

08000754 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <UsageFault_Handler+0x4>

08000764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000792:	f000 f903 	bl	800099c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <SystemInit+0x20>)
 80007a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007a6:	4a05      	ldr	r2, [pc, #20]	@ (80007bc <SystemInit+0x20>)
 80007a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c4:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	@ (8000810 <MX_USART2_UART_Init+0x50>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007f8:	f000 ffcc 	bl	8001794 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000802:	f7ff ff6d 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000090 	.word	0x20000090
 8000810:	40004400 	.word	0x40004400

08000814 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	@ 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a19      	ldr	r2, [pc, #100]	@ (8000898 <HAL_UART_MspInit+0x84>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d12b      	bne.n	800088e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b18      	ldr	r3, [pc, #96]	@ (800089c <HAL_UART_MspInit+0x88>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083e:	4a17      	ldr	r2, [pc, #92]	@ (800089c <HAL_UART_MspInit+0x88>)
 8000840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000844:	6413      	str	r3, [r2, #64]	@ 0x40
 8000846:	4b15      	ldr	r3, [pc, #84]	@ (800089c <HAL_UART_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <HAL_UART_MspInit+0x88>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a10      	ldr	r2, [pc, #64]	@ (800089c <HAL_UART_MspInit+0x88>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <HAL_UART_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800086e:	230c      	movs	r3, #12
 8000870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800087e:	2307      	movs	r3, #7
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <HAL_UART_MspInit+0x8c>)
 800088a:	f000 f98d 	bl	8000ba8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800088e:	bf00      	nop
 8000890:	3728      	adds	r7, #40	@ 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40004400 	.word	0x40004400
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020000 	.word	0x40020000

080008a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008a8:	f7ff ff78 	bl	800079c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008ac:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ae:	490d      	ldr	r1, [pc, #52]	@ (80008e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008b0:	4a0d      	ldr	r2, [pc, #52]	@ (80008e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c2:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008c4:	4c0a      	ldr	r4, [pc, #40]	@ (80008f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008d2:	f001 fbd1 	bl	8002078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008d6:	f7ff fe31 	bl	800053c <main>
  bx  lr    
 80008da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008e8:	0800213c 	.word	0x0800213c
  ldr r2, =_sbss
 80008ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008f0:	200000dc 	.word	0x200000dc

080008f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC_IRQHandler>
	...

080008f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <HAL_Init+0x40>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0d      	ldr	r2, [pc, #52]	@ (8000938 <HAL_Init+0x40>)
 8000902:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000908:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <HAL_Init+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <HAL_Init+0x40>)
 800090e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000914:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a07      	ldr	r2, [pc, #28]	@ (8000938 <HAL_Init+0x40>)
 800091a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800091e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000920:	2003      	movs	r0, #3
 8000922:	f000 f90d 	bl	8000b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000926:	200f      	movs	r0, #15
 8000928:	f000 f808 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800092c:	f7ff fede 	bl	80006ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023c00 	.word	0x40023c00

0800093c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <HAL_InitTick+0x54>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <HAL_InitTick+0x58>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000952:	fbb3 f3f1 	udiv	r3, r3, r1
 8000956:	fbb2 f3f3 	udiv	r3, r2, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f917 	bl	8000b8e <HAL_SYSTICK_Config>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e00e      	b.n	8000988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b0f      	cmp	r3, #15
 800096e:	d80a      	bhi.n	8000986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000970:	2200      	movs	r2, #0
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000978:	f000 f8ed 	bl	8000b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800097c:	4a06      	ldr	r2, [pc, #24]	@ (8000998 <HAL_InitTick+0x5c>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000000 	.word	0x20000000
 8000994:	20000008 	.word	0x20000008
 8000998:	20000004 	.word	0x20000004

0800099c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <HAL_IncTick+0x20>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <HAL_IncTick+0x24>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a04      	ldr	r2, [pc, #16]	@ (80009c0 <HAL_IncTick+0x24>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000008 	.word	0x20000008
 80009c0:	200000d8 	.word	0x200000d8

080009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b03      	ldr	r3, [pc, #12]	@ (80009d8 <HAL_GetTick+0x14>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	200000d8 	.word	0x200000d8

080009dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	@ (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	60d3      	str	r3, [r2, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a28:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <__NVIC_GetPriorityGrouping+0x18>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	f003 0307 	and.w	r3, r3, #7
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	db0a      	blt.n	8000a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	490c      	ldr	r1, [pc, #48]	@ (8000a8c <__NVIC_SetPriority+0x4c>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	0112      	lsls	r2, r2, #4
 8000a60:	b2d2      	uxtb	r2, r2
 8000a62:	440b      	add	r3, r1
 8000a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a68:	e00a      	b.n	8000a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4908      	ldr	r1, [pc, #32]	@ (8000a90 <__NVIC_SetPriority+0x50>)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	3b04      	subs	r3, #4
 8000a78:	0112      	lsls	r2, r2, #4
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	440b      	add	r3, r1
 8000a7e:	761a      	strb	r2, [r3, #24]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000e100 	.word	0xe000e100
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b089      	sub	sp, #36	@ 0x24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	f1c3 0307 	rsb	r3, r3, #7
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	bf28      	it	cs
 8000ab2:	2304      	movcs	r3, #4
 8000ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d902      	bls.n	8000ac4 <NVIC_EncodePriority+0x30>
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3b03      	subs	r3, #3
 8000ac2:	e000      	b.n	8000ac6 <NVIC_EncodePriority+0x32>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000adc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	43d9      	mvns	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	4313      	orrs	r3, r2
         );
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3724      	adds	r7, #36	@ 0x24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b0c:	d301      	bcc.n	8000b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00f      	b.n	8000b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <SysTick_Config+0x40>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b20:	f7ff ff8e 	bl	8000a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <SysTick_Config+0x40>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2a:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <SysTick_Config+0x40>)
 8000b2c:	2207      	movs	r2, #7
 8000b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	e000e010 	.word	0xe000e010

08000b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ff47 	bl	80009dc <__NVIC_SetPriorityGrouping>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b086      	sub	sp, #24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b68:	f7ff ff5c 	bl	8000a24 <__NVIC_GetPriorityGrouping>
 8000b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	6978      	ldr	r0, [r7, #20]
 8000b74:	f7ff ff8e 	bl	8000a94 <NVIC_EncodePriority>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff5d 	bl	8000a40 <__NVIC_SetPriority>
}
 8000b86:	bf00      	nop
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ffb0 	bl	8000afc <SysTick_Config>
 8000b9c:	4603      	mov	r3, r0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	@ 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
 8000bc2:	e159      	b.n	8000e78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	f040 8148 	bne.w	8000e72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 0303 	and.w	r3, r3, #3
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d005      	beq.n	8000bfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d130      	bne.n	8000c5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	2203      	movs	r2, #3
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	68da      	ldr	r2, [r3, #12]
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c30:	2201      	movs	r2, #1
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	091b      	lsrs	r3, r3, #4
 8000c46:	f003 0201 	and.w	r2, r3, #1
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d017      	beq.n	8000c98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d123      	bne.n	8000cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	08da      	lsrs	r2, r3, #3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3208      	adds	r2, #8
 8000cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	f003 0307 	and.w	r3, r3, #7
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	220f      	movs	r2, #15
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	691a      	ldr	r2, [r3, #16]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	08da      	lsrs	r2, r3, #3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3208      	adds	r2, #8
 8000ce6:	69b9      	ldr	r1, [r7, #24]
 8000ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4013      	ands	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0203 	and.w	r2, r3, #3
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f000 80a2 	beq.w	8000e72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b57      	ldr	r3, [pc, #348]	@ (8000e90 <HAL_GPIO_Init+0x2e8>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d36:	4a56      	ldr	r2, [pc, #344]	@ (8000e90 <HAL_GPIO_Init+0x2e8>)
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d3e:	4b54      	ldr	r3, [pc, #336]	@ (8000e90 <HAL_GPIO_Init+0x2e8>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d4a:	4a52      	ldr	r2, [pc, #328]	@ (8000e94 <HAL_GPIO_Init+0x2ec>)
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3302      	adds	r3, #2
 8000d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	220f      	movs	r2, #15
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a49      	ldr	r2, [pc, #292]	@ (8000e98 <HAL_GPIO_Init+0x2f0>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d019      	beq.n	8000daa <HAL_GPIO_Init+0x202>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a48      	ldr	r2, [pc, #288]	@ (8000e9c <HAL_GPIO_Init+0x2f4>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d013      	beq.n	8000da6 <HAL_GPIO_Init+0x1fe>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a47      	ldr	r2, [pc, #284]	@ (8000ea0 <HAL_GPIO_Init+0x2f8>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00d      	beq.n	8000da2 <HAL_GPIO_Init+0x1fa>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a46      	ldr	r2, [pc, #280]	@ (8000ea4 <HAL_GPIO_Init+0x2fc>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d007      	beq.n	8000d9e <HAL_GPIO_Init+0x1f6>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a45      	ldr	r2, [pc, #276]	@ (8000ea8 <HAL_GPIO_Init+0x300>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_GPIO_Init+0x1f2>
 8000d96:	2304      	movs	r3, #4
 8000d98:	e008      	b.n	8000dac <HAL_GPIO_Init+0x204>
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	e006      	b.n	8000dac <HAL_GPIO_Init+0x204>
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e004      	b.n	8000dac <HAL_GPIO_Init+0x204>
 8000da2:	2302      	movs	r3, #2
 8000da4:	e002      	b.n	8000dac <HAL_GPIO_Init+0x204>
 8000da6:	2301      	movs	r3, #1
 8000da8:	e000      	b.n	8000dac <HAL_GPIO_Init+0x204>
 8000daa:	2300      	movs	r3, #0
 8000dac:	69fa      	ldr	r2, [r7, #28]
 8000dae:	f002 0203 	and.w	r2, r2, #3
 8000db2:	0092      	lsls	r2, r2, #2
 8000db4:	4093      	lsls	r3, r2
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dbc:	4935      	ldr	r1, [pc, #212]	@ (8000e94 <HAL_GPIO_Init+0x2ec>)
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dca:	4b38      	ldr	r3, [pc, #224]	@ (8000eac <HAL_GPIO_Init+0x304>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dee:	4a2f      	ldr	r2, [pc, #188]	@ (8000eac <HAL_GPIO_Init+0x304>)
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000df4:	4b2d      	ldr	r3, [pc, #180]	@ (8000eac <HAL_GPIO_Init+0x304>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e18:	4a24      	ldr	r2, [pc, #144]	@ (8000eac <HAL_GPIO_Init+0x304>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e1e:	4b23      	ldr	r3, [pc, #140]	@ (8000eac <HAL_GPIO_Init+0x304>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e42:	4a1a      	ldr	r2, [pc, #104]	@ (8000eac <HAL_GPIO_Init+0x304>)
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e48:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <HAL_GPIO_Init+0x304>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000eac <HAL_GPIO_Init+0x304>)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3301      	adds	r3, #1
 8000e76:	61fb      	str	r3, [r7, #28]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	2b0f      	cmp	r3, #15
 8000e7c:	f67f aea2 	bls.w	8000bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	3724      	adds	r7, #36	@ 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40013800 	.word	0x40013800
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	40020c00 	.word	0x40020c00
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40013c00 	.word	0x40013c00

08000eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ec0:	787b      	ldrb	r3, [r7, #1]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ec6:	887a      	ldrh	r2, [r7, #2]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ecc:	e003      	b.n	8000ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	041a      	lsls	r2, r3, #16
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	619a      	str	r2, [r3, #24]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e267      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d075      	beq.n	8000fee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f02:	4b88      	ldr	r3, [pc, #544]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d00c      	beq.n	8000f28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f0e:	4b85      	ldr	r3, [pc, #532]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	d112      	bne.n	8000f40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f1a:	4b82      	ldr	r3, [pc, #520]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f26:	d10b      	bne.n	8000f40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f28:	4b7e      	ldr	r3, [pc, #504]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d05b      	beq.n	8000fec <HAL_RCC_OscConfig+0x108>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d157      	bne.n	8000fec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e242      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f48:	d106      	bne.n	8000f58 <HAL_RCC_OscConfig+0x74>
 8000f4a:	4b76      	ldr	r3, [pc, #472]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a75      	ldr	r2, [pc, #468]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e01d      	b.n	8000f94 <HAL_RCC_OscConfig+0xb0>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f60:	d10c      	bne.n	8000f7c <HAL_RCC_OscConfig+0x98>
 8000f62:	4b70      	ldr	r3, [pc, #448]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a6f      	ldr	r2, [pc, #444]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	4b6d      	ldr	r3, [pc, #436]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a6c      	ldr	r2, [pc, #432]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e00b      	b.n	8000f94 <HAL_RCC_OscConfig+0xb0>
 8000f7c:	4b69      	ldr	r3, [pc, #420]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a68      	ldr	r2, [pc, #416]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	4b66      	ldr	r3, [pc, #408]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a65      	ldr	r2, [pc, #404]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d013      	beq.n	8000fc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fd12 	bl	80009c4 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fd0e 	bl	80009c4 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	@ 0x64
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e207      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f0      	beq.n	8000fa4 <HAL_RCC_OscConfig+0xc0>
 8000fc2:	e014      	b.n	8000fee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fcfe 	bl	80009c4 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fcfa 	bl	80009c4 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b64      	cmp	r3, #100	@ 0x64
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e1f3      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fde:	4b51      	ldr	r3, [pc, #324]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f0      	bne.n	8000fcc <HAL_RCC_OscConfig+0xe8>
 8000fea:	e000      	b.n	8000fee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d063      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00b      	beq.n	800101e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001006:	4b47      	ldr	r3, [pc, #284]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800100e:	2b08      	cmp	r3, #8
 8001010:	d11c      	bne.n	800104c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001012:	4b44      	ldr	r3, [pc, #272]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d116      	bne.n	800104c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101e:	4b41      	ldr	r3, [pc, #260]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d005      	beq.n	8001036 <HAL_RCC_OscConfig+0x152>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d001      	beq.n	8001036 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e1c7      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001036:	4b3b      	ldr	r3, [pc, #236]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4937      	ldr	r1, [pc, #220]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001046:	4313      	orrs	r3, r2
 8001048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104a:	e03a      	b.n	80010c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d020      	beq.n	8001096 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001054:	4b34      	ldr	r3, [pc, #208]	@ (8001128 <HAL_RCC_OscConfig+0x244>)
 8001056:	2201      	movs	r2, #1
 8001058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800105a:	f7ff fcb3 	bl	80009c4 <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001060:	e008      	b.n	8001074 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001062:	f7ff fcaf 	bl	80009c4 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e1a8      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001074:	4b2b      	ldr	r3, [pc, #172]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f0      	beq.n	8001062 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001080:	4b28      	ldr	r3, [pc, #160]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4925      	ldr	r1, [pc, #148]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001090:	4313      	orrs	r3, r2
 8001092:	600b      	str	r3, [r1, #0]
 8001094:	e015      	b.n	80010c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001096:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <HAL_RCC_OscConfig+0x244>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109c:	f7ff fc92 	bl	80009c4 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a4:	f7ff fc8e 	bl	80009c4 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e187      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d036      	beq.n	800113c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d016      	beq.n	8001104 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <HAL_RCC_OscConfig+0x248>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010dc:	f7ff fc72 	bl	80009c4 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e4:	f7ff fc6e 	bl	80009c4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e167      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 80010f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f0      	beq.n	80010e4 <HAL_RCC_OscConfig+0x200>
 8001102:	e01b      	b.n	800113c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <HAL_RCC_OscConfig+0x248>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110a:	f7ff fc5b 	bl	80009c4 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001110:	e00e      	b.n	8001130 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001112:	f7ff fc57 	bl	80009c4 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d907      	bls.n	8001130 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e150      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
 8001124:	40023800 	.word	0x40023800
 8001128:	42470000 	.word	0x42470000
 800112c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001130:	4b88      	ldr	r3, [pc, #544]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1ea      	bne.n	8001112 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 8097 	beq.w	8001278 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800114e:	4b81      	ldr	r3, [pc, #516]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10f      	bne.n	800117a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b7d      	ldr	r3, [pc, #500]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	4a7c      	ldr	r2, [pc, #496]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	@ 0x40
 800116a:	4b7a      	ldr	r3, [pc, #488]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001176:	2301      	movs	r3, #1
 8001178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117a:	4b77      	ldr	r3, [pc, #476]	@ (8001358 <HAL_RCC_OscConfig+0x474>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001182:	2b00      	cmp	r3, #0
 8001184:	d118      	bne.n	80011b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001186:	4b74      	ldr	r3, [pc, #464]	@ (8001358 <HAL_RCC_OscConfig+0x474>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a73      	ldr	r2, [pc, #460]	@ (8001358 <HAL_RCC_OscConfig+0x474>)
 800118c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001192:	f7ff fc17 	bl	80009c4 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800119a:	f7ff fc13 	bl	80009c4 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e10c      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001358 <HAL_RCC_OscConfig+0x474>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d106      	bne.n	80011ce <HAL_RCC_OscConfig+0x2ea>
 80011c0:	4b64      	ldr	r3, [pc, #400]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011c4:	4a63      	ldr	r2, [pc, #396]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80011cc:	e01c      	b.n	8001208 <HAL_RCC_OscConfig+0x324>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b05      	cmp	r3, #5
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x30c>
 80011d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011da:	4a5e      	ldr	r2, [pc, #376]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80011e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0x324>
 80011f0:	4b58      	ldr	r3, [pc, #352]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011f4:	4a57      	ldr	r2, [pc, #348]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011f6:	f023 0301 	bic.w	r3, r3, #1
 80011fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80011fc:	4b55      	ldr	r3, [pc, #340]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001200:	4a54      	ldr	r2, [pc, #336]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001202:	f023 0304 	bic.w	r3, r3, #4
 8001206:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d015      	beq.n	800123c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001210:	f7ff fbd8 	bl	80009c4 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001216:	e00a      	b.n	800122e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001218:	f7ff fbd4 	bl	80009c4 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001226:	4293      	cmp	r3, r2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e0cb      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122e:	4b49      	ldr	r3, [pc, #292]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0ee      	beq.n	8001218 <HAL_RCC_OscConfig+0x334>
 800123a:	e014      	b.n	8001266 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123c:	f7ff fbc2 	bl	80009c4 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001242:	e00a      	b.n	800125a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001244:	f7ff fbbe 	bl	80009c4 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001252:	4293      	cmp	r3, r2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e0b5      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800125a:	4b3e      	ldr	r3, [pc, #248]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800125c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1ee      	bne.n	8001244 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001266:	7dfb      	ldrb	r3, [r7, #23]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d105      	bne.n	8001278 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800126c:	4b39      	ldr	r3, [pc, #228]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	4a38      	ldr	r2, [pc, #224]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80a1 	beq.w	80013c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001282:	4b34      	ldr	r3, [pc, #208]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b08      	cmp	r3, #8
 800128c:	d05c      	beq.n	8001348 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d141      	bne.n	800131a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001296:	4b31      	ldr	r3, [pc, #196]	@ (800135c <HAL_RCC_OscConfig+0x478>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fb92 	bl	80009c4 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a4:	f7ff fb8e 	bl	80009c4 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e087      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b6:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69da      	ldr	r2, [r3, #28]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d0:	019b      	lsls	r3, r3, #6
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d8:	085b      	lsrs	r3, r3, #1
 80012da:	3b01      	subs	r3, #1
 80012dc:	041b      	lsls	r3, r3, #16
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e4:	061b      	lsls	r3, r3, #24
 80012e6:	491b      	ldr	r1, [pc, #108]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <HAL_RCC_OscConfig+0x478>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7ff fb67 	bl	80009c4 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fa:	f7ff fb63 	bl	80009c4 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e05c      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x416>
 8001318:	e054      	b.n	80013c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131a:	4b10      	ldr	r3, [pc, #64]	@ (800135c <HAL_RCC_OscConfig+0x478>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fb50 	bl	80009c4 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001328:	f7ff fb4c 	bl	80009c4 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e045      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x444>
 8001346:	e03d      	b.n	80013c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d107      	bne.n	8001360 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e038      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
 8001354:	40023800 	.word	0x40023800
 8001358:	40007000 	.word	0x40007000
 800135c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <HAL_RCC_OscConfig+0x4ec>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d028      	beq.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001378:	429a      	cmp	r2, r3
 800137a:	d121      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d11a      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001390:	4013      	ands	r3, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001396:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001398:	4293      	cmp	r3, r2
 800139a:	d111      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a6:	085b      	lsrs	r3, r3, #1
 80013a8:	3b01      	subs	r3, #1
 80013aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d107      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013bc:	429a      	cmp	r2, r3
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800

080013d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0cc      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013e8:	4b68      	ldr	r3, [pc, #416]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d90c      	bls.n	8001410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f6:	4b65      	ldr	r3, [pc, #404]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b63      	ldr	r3, [pc, #396]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0b8      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001428:	4b59      	ldr	r3, [pc, #356]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	4a58      	ldr	r2, [pc, #352]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001432:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001440:	4b53      	ldr	r3, [pc, #332]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	4a52      	ldr	r2, [pc, #328]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800144a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800144c:	4b50      	ldr	r3, [pc, #320]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	494d      	ldr	r1, [pc, #308]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	4313      	orrs	r3, r2
 800145c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d044      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	4b47      	ldr	r3, [pc, #284]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d119      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e07f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d003      	beq.n	8001492 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800148e:	2b03      	cmp	r3, #3
 8001490:	d107      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001492:	4b3f      	ldr	r3, [pc, #252]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d109      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e06f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e067      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b2:	4b37      	ldr	r3, [pc, #220]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f023 0203 	bic.w	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4934      	ldr	r1, [pc, #208]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c4:	f7ff fa7e 	bl	80009c4 <HAL_GetTick>
 80014c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ca:	e00a      	b.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014cc:	f7ff fa7a 	bl	80009c4 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e04f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 020c 	and.w	r2, r3, #12
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d1eb      	bne.n	80014cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014f4:	4b25      	ldr	r3, [pc, #148]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d20c      	bcs.n	800151c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b22      	ldr	r3, [pc, #136]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b20      	ldr	r3, [pc, #128]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e032      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001528:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4916      	ldr	r1, [pc, #88]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001546:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	490e      	ldr	r1, [pc, #56]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	4313      	orrs	r3, r2
 8001558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800155a:	f000 f821 	bl	80015a0 <HAL_RCC_GetSysClockFreq>
 800155e:	4602      	mov	r2, r0
 8001560:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	490a      	ldr	r1, [pc, #40]	@ (8001594 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	5ccb      	ldrb	r3, [r1, r3]
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	4a09      	ldr	r2, [pc, #36]	@ (8001598 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <HAL_RCC_ClockConfig+0x1c8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f9de 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023c00 	.word	0x40023c00
 8001590:	40023800 	.word	0x40023800
 8001594:	08002114 	.word	0x08002114
 8001598:	20000000 	.word	0x20000000
 800159c:	20000004 	.word	0x20000004

080015a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a4:	b090      	sub	sp, #64	@ 0x40
 80015a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015b8:	4b59      	ldr	r3, [pc, #356]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d00d      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0x40>
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	f200 80a1 	bhi.w	800170c <HAL_RCC_GetSysClockFreq+0x16c>
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x34>
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d003      	beq.n	80015da <HAL_RCC_GetSysClockFreq+0x3a>
 80015d2:	e09b      	b.n	800170c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015d4:	4b53      	ldr	r3, [pc, #332]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x184>)
 80015d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015d8:	e09b      	b.n	8001712 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015da:	4b53      	ldr	r3, [pc, #332]	@ (8001728 <HAL_RCC_GetSysClockFreq+0x188>)
 80015dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015de:	e098      	b.n	8001712 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d028      	beq.n	8001648 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	099b      	lsrs	r3, r3, #6
 80015fc:	2200      	movs	r2, #0
 80015fe:	623b      	str	r3, [r7, #32]
 8001600:	627a      	str	r2, [r7, #36]	@ 0x24
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001608:	2100      	movs	r1, #0
 800160a:	4b47      	ldr	r3, [pc, #284]	@ (8001728 <HAL_RCC_GetSysClockFreq+0x188>)
 800160c:	fb03 f201 	mul.w	r2, r3, r1
 8001610:	2300      	movs	r3, #0
 8001612:	fb00 f303 	mul.w	r3, r0, r3
 8001616:	4413      	add	r3, r2
 8001618:	4a43      	ldr	r2, [pc, #268]	@ (8001728 <HAL_RCC_GetSysClockFreq+0x188>)
 800161a:	fba0 1202 	umull	r1, r2, r0, r2
 800161e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001620:	460a      	mov	r2, r1
 8001622:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001624:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001626:	4413      	add	r3, r2
 8001628:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800162a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800162c:	2200      	movs	r2, #0
 800162e:	61bb      	str	r3, [r7, #24]
 8001630:	61fa      	str	r2, [r7, #28]
 8001632:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001636:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800163a:	f7fe fdd5 	bl	80001e8 <__aeabi_uldivmod>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4613      	mov	r3, r2
 8001644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001646:	e053      	b.n	80016f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001648:	4b35      	ldr	r3, [pc, #212]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	099b      	lsrs	r3, r3, #6
 800164e:	2200      	movs	r2, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	617a      	str	r2, [r7, #20]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800165a:	f04f 0b00 	mov.w	fp, #0
 800165e:	4652      	mov	r2, sl
 8001660:	465b      	mov	r3, fp
 8001662:	f04f 0000 	mov.w	r0, #0
 8001666:	f04f 0100 	mov.w	r1, #0
 800166a:	0159      	lsls	r1, r3, #5
 800166c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001670:	0150      	lsls	r0, r2, #5
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	ebb2 080a 	subs.w	r8, r2, sl
 800167a:	eb63 090b 	sbc.w	r9, r3, fp
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800168a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800168e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001692:	ebb2 0408 	subs.w	r4, r2, r8
 8001696:	eb63 0509 	sbc.w	r5, r3, r9
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	00eb      	lsls	r3, r5, #3
 80016a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016a8:	00e2      	lsls	r2, r4, #3
 80016aa:	4614      	mov	r4, r2
 80016ac:	461d      	mov	r5, r3
 80016ae:	eb14 030a 	adds.w	r3, r4, sl
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	eb45 030b 	adc.w	r3, r5, fp
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016c6:	4629      	mov	r1, r5
 80016c8:	028b      	lsls	r3, r1, #10
 80016ca:	4621      	mov	r1, r4
 80016cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016d0:	4621      	mov	r1, r4
 80016d2:	028a      	lsls	r2, r1, #10
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016da:	2200      	movs	r2, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	60fa      	str	r2, [r7, #12]
 80016e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016e4:	f7fe fd80 	bl	80001e8 <__aeabi_uldivmod>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4613      	mov	r3, r2
 80016ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	0c1b      	lsrs	r3, r3, #16
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	3301      	adds	r3, #1
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001700:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001704:	fbb2 f3f3 	udiv	r3, r2, r3
 8001708:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800170a:	e002      	b.n	8001712 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800170c:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x184>)
 800170e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001714:	4618      	mov	r0, r3
 8001716:	3740      	adds	r7, #64	@ 0x40
 8001718:	46bd      	mov	sp, r7
 800171a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800
 8001724:	00f42400 	.word	0x00f42400
 8001728:	017d7840 	.word	0x017d7840

0800172c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <HAL_RCC_GetHCLKFreq+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000000 	.word	0x20000000

08001744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001748:	f7ff fff0 	bl	800172c <HAL_RCC_GetHCLKFreq>
 800174c:	4602      	mov	r2, r0
 800174e:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	0a9b      	lsrs	r3, r3, #10
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	4903      	ldr	r1, [pc, #12]	@ (8001768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800175a:	5ccb      	ldrb	r3, [r1, r3]
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001760:	4618      	mov	r0, r3
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40023800 	.word	0x40023800
 8001768:	08002124 	.word	0x08002124

0800176c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001770:	f7ff ffdc 	bl	800172c <HAL_RCC_GetHCLKFreq>
 8001774:	4602      	mov	r2, r0
 8001776:	4b05      	ldr	r3, [pc, #20]	@ (800178c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	0b5b      	lsrs	r3, r3, #13
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	4903      	ldr	r1, [pc, #12]	@ (8001790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001782:	5ccb      	ldrb	r3, [r1, r3]
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001788:	4618      	mov	r0, r3
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40023800 	.word	0x40023800
 8001790:	08002124 	.word	0x08002124

08001794 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e042      	b.n	800182c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d106      	bne.n	80017c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff f82a 	bl	8000814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2224      	movs	r2, #36	@ 0x24
 80017c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80017d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f9d1 	bl	8001b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	691a      	ldr	r2, [r3, #16]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80017ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	695a      	ldr	r2, [r3, #20]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80017fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800180c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2220      	movs	r2, #32
 8001818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2220      	movs	r2, #32
 8001820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	@ 0x28
 8001838:	af02      	add	r7, sp, #8
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	4613      	mov	r3, r2
 8001842:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b20      	cmp	r3, #32
 8001852:	d175      	bne.n	8001940 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_UART_Transmit+0x2c>
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e06e      	b.n	8001942 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2221      	movs	r2, #33	@ 0x21
 800186e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001872:	f7ff f8a7 	bl	80009c4 <HAL_GetTick>
 8001876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	88fa      	ldrh	r2, [r7, #6]
 800187c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800188c:	d108      	bne.n	80018a0 <HAL_UART_Transmit+0x6c>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d104      	bne.n	80018a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	e003      	b.n	80018a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80018a8:	e02e      	b.n	8001908 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	2200      	movs	r2, #0
 80018b2:	2180      	movs	r1, #128	@ 0x80
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 f86d 	bl	8001994 <UART_WaitOnFlagUntilTimeout>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2220      	movs	r2, #32
 80018c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e03a      	b.n	8001942 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10b      	bne.n	80018ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	3302      	adds	r3, #2
 80018e6:	61bb      	str	r3, [r7, #24]
 80018e8:	e007      	b.n	80018fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	781a      	ldrb	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	3301      	adds	r3, #1
 80018f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80018fe:	b29b      	uxth	r3, r3
 8001900:	3b01      	subs	r3, #1
 8001902:	b29a      	uxth	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800190c:	b29b      	uxth	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1cb      	bne.n	80018aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2200      	movs	r2, #0
 800191a:	2140      	movs	r1, #64	@ 0x40
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 f839 	bl	8001994 <UART_WaitOnFlagUntilTimeout>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2220      	movs	r2, #32
 800192c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e006      	b.n	8001942 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2220      	movs	r2, #32
 8001938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	e000      	b.n	8001942 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001940:	2302      	movs	r3, #2
  }
}
 8001942:	4618      	mov	r0, r3
 8001944:	3720      	adds	r7, #32
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	4613      	mov	r3, r2
 8001956:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b20      	cmp	r3, #32
 8001962:	d112      	bne.n	800198a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <HAL_UART_Receive_IT+0x26>
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e00b      	b.n	800198c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	461a      	mov	r2, r3
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 f860 	bl	8001a46 <UART_Start_Receive_IT>
 8001986:	4603      	mov	r3, r0
 8001988:	e000      	b.n	800198c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800198a:	2302      	movs	r3, #2
  }
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	4613      	mov	r3, r2
 80019a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019a4:	e03b      	b.n	8001a1e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019ac:	d037      	beq.n	8001a1e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ae:	f7ff f809 	bl	80009c4 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	6a3a      	ldr	r2, [r7, #32]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d302      	bcc.n	80019c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e03a      	b.n	8001a3e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d023      	beq.n	8001a1e <UART_WaitOnFlagUntilTimeout+0x8a>
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2b80      	cmp	r3, #128	@ 0x80
 80019da:	d020      	beq.n	8001a1e <UART_WaitOnFlagUntilTimeout+0x8a>
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2b40      	cmp	r3, #64	@ 0x40
 80019e0:	d01d      	beq.n	8001a1e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d116      	bne.n	8001a1e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 f857 	bl	8001aba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2208      	movs	r2, #8
 8001a10:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00f      	b.n	8001a3e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	4013      	ands	r3, r2
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	bf0c      	ite	eq
 8001a2e:	2301      	moveq	r3, #1
 8001a30:	2300      	movne	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d0b4      	beq.n	80019a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b085      	sub	sp, #20
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	4613      	mov	r3, r2
 8001a52:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	88fa      	ldrh	r2, [r7, #6]
 8001a5e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	88fa      	ldrh	r2, [r7, #6]
 8001a64:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2222      	movs	r2, #34	@ 0x22
 8001a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d007      	beq.n	8001a8c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a8a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0201 	orr.w	r2, r2, #1
 8001a9a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0220 	orr.w	r2, r2, #32
 8001aaa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b095      	sub	sp, #84	@ 0x54
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	330c      	adds	r3, #12
 8001ac8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001acc:	e853 3f00 	ldrex	r3, [r3]
 8001ad0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ad4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	330c      	adds	r3, #12
 8001ae0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ae2:	643a      	str	r2, [r7, #64]	@ 0x40
 8001ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ae6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001ae8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001aea:	e841 2300 	strex	r3, r2, [r1]
 8001aee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1e5      	bne.n	8001ac2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3314      	adds	r3, #20
 8001afc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	e853 3f00 	ldrex	r3, [r3]
 8001b04:	61fb      	str	r3, [r7, #28]
   return(result);
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	f023 0301 	bic.w	r3, r3, #1
 8001b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	3314      	adds	r3, #20
 8001b14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b1e:	e841 2300 	strex	r3, r2, [r1]
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1e5      	bne.n	8001af6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d119      	bne.n	8001b66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	330c      	adds	r3, #12
 8001b38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	e853 3f00 	ldrex	r3, [r3]
 8001b40:	60bb      	str	r3, [r7, #8]
   return(result);
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	f023 0310 	bic.w	r3, r3, #16
 8001b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	330c      	adds	r3, #12
 8001b50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b52:	61ba      	str	r2, [r7, #24]
 8001b54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b56:	6979      	ldr	r1, [r7, #20]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	e841 2300 	strex	r3, r2, [r1]
 8001b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1e5      	bne.n	8001b32 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001b74:	bf00      	nop
 8001b76:	3754      	adds	r7, #84	@ 0x54
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b84:	b0c0      	sub	sp, #256	@ 0x100
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b9c:	68d9      	ldr	r1, [r3, #12]
 8001b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	ea40 0301 	orr.w	r3, r0, r1
 8001ba8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001bd8:	f021 010c 	bic.w	r1, r1, #12
 8001bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001be6:	430b      	orrs	r3, r1
 8001be8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bfa:	6999      	ldr	r1, [r3, #24]
 8001bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	ea40 0301 	orr.w	r3, r0, r1
 8001c06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b8f      	ldr	r3, [pc, #572]	@ (8001e4c <UART_SetConfig+0x2cc>)
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d005      	beq.n	8001c20 <UART_SetConfig+0xa0>
 8001c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b8d      	ldr	r3, [pc, #564]	@ (8001e50 <UART_SetConfig+0x2d0>)
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d104      	bne.n	8001c2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c20:	f7ff fda4 	bl	800176c <HAL_RCC_GetPCLK2Freq>
 8001c24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001c28:	e003      	b.n	8001c32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c2a:	f7ff fd8b 	bl	8001744 <HAL_RCC_GetPCLK1Freq>
 8001c2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c3c:	f040 810c 	bne.w	8001e58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c44:	2200      	movs	r2, #0
 8001c46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001c4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001c4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001c52:	4622      	mov	r2, r4
 8001c54:	462b      	mov	r3, r5
 8001c56:	1891      	adds	r1, r2, r2
 8001c58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001c5a:	415b      	adcs	r3, r3
 8001c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c62:	4621      	mov	r1, r4
 8001c64:	eb12 0801 	adds.w	r8, r2, r1
 8001c68:	4629      	mov	r1, r5
 8001c6a:	eb43 0901 	adc.w	r9, r3, r1
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c82:	4690      	mov	r8, r2
 8001c84:	4699      	mov	r9, r3
 8001c86:	4623      	mov	r3, r4
 8001c88:	eb18 0303 	adds.w	r3, r8, r3
 8001c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001c90:	462b      	mov	r3, r5
 8001c92:	eb49 0303 	adc.w	r3, r9, r3
 8001c96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001ca6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001caa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001cae:	460b      	mov	r3, r1
 8001cb0:	18db      	adds	r3, r3, r3
 8001cb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	eb42 0303 	adc.w	r3, r2, r3
 8001cba:	657b      	str	r3, [r7, #84]	@ 0x54
 8001cbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001cc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001cc4:	f7fe fa90 	bl	80001e8 <__aeabi_uldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4b61      	ldr	r3, [pc, #388]	@ (8001e54 <UART_SetConfig+0x2d4>)
 8001cce:	fba3 2302 	umull	r2, r3, r3, r2
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	011c      	lsls	r4, r3, #4
 8001cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001ce0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001ce4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001ce8:	4642      	mov	r2, r8
 8001cea:	464b      	mov	r3, r9
 8001cec:	1891      	adds	r1, r2, r2
 8001cee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001cf0:	415b      	adcs	r3, r3
 8001cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001cf8:	4641      	mov	r1, r8
 8001cfa:	eb12 0a01 	adds.w	sl, r2, r1
 8001cfe:	4649      	mov	r1, r9
 8001d00:	eb43 0b01 	adc.w	fp, r3, r1
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d18:	4692      	mov	sl, r2
 8001d1a:	469b      	mov	fp, r3
 8001d1c:	4643      	mov	r3, r8
 8001d1e:	eb1a 0303 	adds.w	r3, sl, r3
 8001d22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001d26:	464b      	mov	r3, r9
 8001d28:	eb4b 0303 	adc.w	r3, fp, r3
 8001d2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001d3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001d40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001d44:	460b      	mov	r3, r1
 8001d46:	18db      	adds	r3, r3, r3
 8001d48:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	eb42 0303 	adc.w	r3, r2, r3
 8001d50:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001d5a:	f7fe fa45 	bl	80001e8 <__aeabi_uldivmod>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4611      	mov	r1, r2
 8001d64:	4b3b      	ldr	r3, [pc, #236]	@ (8001e54 <UART_SetConfig+0x2d4>)
 8001d66:	fba3 2301 	umull	r2, r3, r3, r1
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	2264      	movs	r2, #100	@ 0x64
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	1acb      	subs	r3, r1, r3
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001d7a:	4b36      	ldr	r3, [pc, #216]	@ (8001e54 <UART_SetConfig+0x2d4>)
 8001d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8001d80:	095b      	lsrs	r3, r3, #5
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001d88:	441c      	add	r4, r3
 8001d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001d94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001d98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001d9c:	4642      	mov	r2, r8
 8001d9e:	464b      	mov	r3, r9
 8001da0:	1891      	adds	r1, r2, r2
 8001da2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001da4:	415b      	adcs	r3, r3
 8001da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001da8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001dac:	4641      	mov	r1, r8
 8001dae:	1851      	adds	r1, r2, r1
 8001db0:	6339      	str	r1, [r7, #48]	@ 0x30
 8001db2:	4649      	mov	r1, r9
 8001db4:	414b      	adcs	r3, r1
 8001db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001dc4:	4659      	mov	r1, fp
 8001dc6:	00cb      	lsls	r3, r1, #3
 8001dc8:	4651      	mov	r1, sl
 8001dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dce:	4651      	mov	r1, sl
 8001dd0:	00ca      	lsls	r2, r1, #3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4642      	mov	r2, r8
 8001dda:	189b      	adds	r3, r3, r2
 8001ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001de0:	464b      	mov	r3, r9
 8001de2:	460a      	mov	r2, r1
 8001de4:	eb42 0303 	adc.w	r3, r2, r3
 8001de8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001df8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001dfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001e00:	460b      	mov	r3, r1
 8001e02:	18db      	adds	r3, r3, r3
 8001e04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e06:	4613      	mov	r3, r2
 8001e08:	eb42 0303 	adc.w	r3, r2, r3
 8001e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001e16:	f7fe f9e7 	bl	80001e8 <__aeabi_uldivmod>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <UART_SetConfig+0x2d4>)
 8001e20:	fba3 1302 	umull	r1, r3, r3, r2
 8001e24:	095b      	lsrs	r3, r3, #5
 8001e26:	2164      	movs	r1, #100	@ 0x64
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	3332      	adds	r3, #50	@ 0x32
 8001e32:	4a08      	ldr	r2, [pc, #32]	@ (8001e54 <UART_SetConfig+0x2d4>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	095b      	lsrs	r3, r3, #5
 8001e3a:	f003 0207 	and.w	r2, r3, #7
 8001e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4422      	add	r2, r4
 8001e46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e48:	e106      	b.n	8002058 <UART_SetConfig+0x4d8>
 8001e4a:	bf00      	nop
 8001e4c:	40011000 	.word	0x40011000
 8001e50:	40011400 	.word	0x40011400
 8001e54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001e62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001e66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001e6a:	4642      	mov	r2, r8
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	1891      	adds	r1, r2, r2
 8001e70:	6239      	str	r1, [r7, #32]
 8001e72:	415b      	adcs	r3, r3
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	1854      	adds	r4, r2, r1
 8001e7e:	4649      	mov	r1, r9
 8001e80:	eb43 0501 	adc.w	r5, r3, r1
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	00eb      	lsls	r3, r5, #3
 8001e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e92:	00e2      	lsls	r2, r4, #3
 8001e94:	4614      	mov	r4, r2
 8001e96:	461d      	mov	r5, r3
 8001e98:	4643      	mov	r3, r8
 8001e9a:	18e3      	adds	r3, r4, r3
 8001e9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ea0:	464b      	mov	r3, r9
 8001ea2:	eb45 0303 	adc.w	r3, r5, r3
 8001ea6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001eb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	008b      	lsls	r3, r1, #2
 8001eca:	4621      	mov	r1, r4
 8001ecc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	008a      	lsls	r2, r1, #2
 8001ed4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001ed8:	f7fe f986 	bl	80001e8 <__aeabi_uldivmod>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4b60      	ldr	r3, [pc, #384]	@ (8002064 <UART_SetConfig+0x4e4>)
 8001ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	011c      	lsls	r4, r3, #4
 8001eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ef4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ef8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001efc:	4642      	mov	r2, r8
 8001efe:	464b      	mov	r3, r9
 8001f00:	1891      	adds	r1, r2, r2
 8001f02:	61b9      	str	r1, [r7, #24]
 8001f04:	415b      	adcs	r3, r3
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f0c:	4641      	mov	r1, r8
 8001f0e:	1851      	adds	r1, r2, r1
 8001f10:	6139      	str	r1, [r7, #16]
 8001f12:	4649      	mov	r1, r9
 8001f14:	414b      	adcs	r3, r1
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f24:	4659      	mov	r1, fp
 8001f26:	00cb      	lsls	r3, r1, #3
 8001f28:	4651      	mov	r1, sl
 8001f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f2e:	4651      	mov	r1, sl
 8001f30:	00ca      	lsls	r2, r1, #3
 8001f32:	4610      	mov	r0, r2
 8001f34:	4619      	mov	r1, r3
 8001f36:	4603      	mov	r3, r0
 8001f38:	4642      	mov	r2, r8
 8001f3a:	189b      	adds	r3, r3, r2
 8001f3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f40:	464b      	mov	r3, r9
 8001f42:	460a      	mov	r2, r1
 8001f44:	eb42 0303 	adc.w	r3, r2, r3
 8001f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001f64:	4649      	mov	r1, r9
 8001f66:	008b      	lsls	r3, r1, #2
 8001f68:	4641      	mov	r1, r8
 8001f6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f6e:	4641      	mov	r1, r8
 8001f70:	008a      	lsls	r2, r1, #2
 8001f72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001f76:	f7fe f937 	bl	80001e8 <__aeabi_uldivmod>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4b38      	ldr	r3, [pc, #224]	@ (8002064 <UART_SetConfig+0x4e4>)
 8001f82:	fba3 2301 	umull	r2, r3, r3, r1
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2264      	movs	r2, #100	@ 0x64
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	1acb      	subs	r3, r1, r3
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	3332      	adds	r3, #50	@ 0x32
 8001f94:	4a33      	ldr	r2, [pc, #204]	@ (8002064 <UART_SetConfig+0x4e4>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fa0:	441c      	add	r4, r3
 8001fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	673b      	str	r3, [r7, #112]	@ 0x70
 8001faa:	677a      	str	r2, [r7, #116]	@ 0x74
 8001fac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001fb0:	4642      	mov	r2, r8
 8001fb2:	464b      	mov	r3, r9
 8001fb4:	1891      	adds	r1, r2, r2
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	415b      	adcs	r3, r3
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fc0:	4641      	mov	r1, r8
 8001fc2:	1851      	adds	r1, r2, r1
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	4649      	mov	r1, r9
 8001fc8:	414b      	adcs	r3, r1
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001fd8:	4659      	mov	r1, fp
 8001fda:	00cb      	lsls	r3, r1, #3
 8001fdc:	4651      	mov	r1, sl
 8001fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fe2:	4651      	mov	r1, sl
 8001fe4:	00ca      	lsls	r2, r1, #3
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4603      	mov	r3, r0
 8001fec:	4642      	mov	r2, r8
 8001fee:	189b      	adds	r3, r3, r2
 8001ff0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ff2:	464b      	mov	r3, r9
 8001ff4:	460a      	mov	r2, r1
 8001ff6:	eb42 0303 	adc.w	r3, r2, r3
 8001ffa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	663b      	str	r3, [r7, #96]	@ 0x60
 8002006:	667a      	str	r2, [r7, #100]	@ 0x64
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002014:	4649      	mov	r1, r9
 8002016:	008b      	lsls	r3, r1, #2
 8002018:	4641      	mov	r1, r8
 800201a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800201e:	4641      	mov	r1, r8
 8002020:	008a      	lsls	r2, r1, #2
 8002022:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002026:	f7fe f8df 	bl	80001e8 <__aeabi_uldivmod>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4b0d      	ldr	r3, [pc, #52]	@ (8002064 <UART_SetConfig+0x4e4>)
 8002030:	fba3 1302 	umull	r1, r3, r3, r2
 8002034:	095b      	lsrs	r3, r3, #5
 8002036:	2164      	movs	r1, #100	@ 0x64
 8002038:	fb01 f303 	mul.w	r3, r1, r3
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	3332      	adds	r3, #50	@ 0x32
 8002042:	4a08      	ldr	r2, [pc, #32]	@ (8002064 <UART_SetConfig+0x4e4>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	095b      	lsrs	r3, r3, #5
 800204a:	f003 020f 	and.w	r2, r3, #15
 800204e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4422      	add	r2, r4
 8002056:	609a      	str	r2, [r3, #8]
}
 8002058:	bf00      	nop
 800205a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800205e:	46bd      	mov	sp, r7
 8002060:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002064:	51eb851f 	.word	0x51eb851f

08002068 <memset>:
 8002068:	4402      	add	r2, r0
 800206a:	4603      	mov	r3, r0
 800206c:	4293      	cmp	r3, r2
 800206e:	d100      	bne.n	8002072 <memset+0xa>
 8002070:	4770      	bx	lr
 8002072:	f803 1b01 	strb.w	r1, [r3], #1
 8002076:	e7f9      	b.n	800206c <memset+0x4>

08002078 <__libc_init_array>:
 8002078:	b570      	push	{r4, r5, r6, lr}
 800207a:	4d0d      	ldr	r5, [pc, #52]	@ (80020b0 <__libc_init_array+0x38>)
 800207c:	4c0d      	ldr	r4, [pc, #52]	@ (80020b4 <__libc_init_array+0x3c>)
 800207e:	1b64      	subs	r4, r4, r5
 8002080:	10a4      	asrs	r4, r4, #2
 8002082:	2600      	movs	r6, #0
 8002084:	42a6      	cmp	r6, r4
 8002086:	d109      	bne.n	800209c <__libc_init_array+0x24>
 8002088:	4d0b      	ldr	r5, [pc, #44]	@ (80020b8 <__libc_init_array+0x40>)
 800208a:	4c0c      	ldr	r4, [pc, #48]	@ (80020bc <__libc_init_array+0x44>)
 800208c:	f000 f818 	bl	80020c0 <_init>
 8002090:	1b64      	subs	r4, r4, r5
 8002092:	10a4      	asrs	r4, r4, #2
 8002094:	2600      	movs	r6, #0
 8002096:	42a6      	cmp	r6, r4
 8002098:	d105      	bne.n	80020a6 <__libc_init_array+0x2e>
 800209a:	bd70      	pop	{r4, r5, r6, pc}
 800209c:	f855 3b04 	ldr.w	r3, [r5], #4
 80020a0:	4798      	blx	r3
 80020a2:	3601      	adds	r6, #1
 80020a4:	e7ee      	b.n	8002084 <__libc_init_array+0xc>
 80020a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80020aa:	4798      	blx	r3
 80020ac:	3601      	adds	r6, #1
 80020ae:	e7f2      	b.n	8002096 <__libc_init_array+0x1e>
 80020b0:	08002134 	.word	0x08002134
 80020b4:	08002134 	.word	0x08002134
 80020b8:	08002134 	.word	0x08002134
 80020bc:	08002138 	.word	0x08002138

080020c0 <_init>:
 80020c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020c2:	bf00      	nop
 80020c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020c6:	bc08      	pop	{r3}
 80020c8:	469e      	mov	lr, r3
 80020ca:	4770      	bx	lr

080020cc <_fini>:
 80020cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ce:	bf00      	nop
 80020d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020d2:	bc08      	pop	{r3}
 80020d4:	469e      	mov	lr, r3
 80020d6:	4770      	bx	lr
